package com.ping.cookbook.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ping.cookbook.bean.CookIndex;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COOK_INDEX".
*/
public class CookIndexDao extends AbstractDao<CookIndex, Long> {

    public static final String TABLENAME = "COOK_INDEX";

    /**
     * Properties of entity CookIndex.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property SaveTime = new Property(2, Long.class, "saveTime", false, "SAVE_TIME");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Tags = new Property(4, String.class, "tags", false, "TAGS");
        public final static Property Intro = new Property(5, String.class, "intro", false, "INTRO");
        public final static Property Ingredients = new Property(6, String.class, "ingredients", false, "INGREDIENTS");
        public final static Property Burden = new Property(7, String.class, "burden", false, "BURDEN");
        public final static Property Albums = new Property(8, String.class, "albums", false, "ALBUMS");
    };

    private DaoSession daoSession;


    public CookIndexDao(DaoConfig config) {
        super(config);
    }
    
    public CookIndexDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COOK_INDEX\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER," + // 1: type
                "\"SAVE_TIME\" INTEGER," + // 2: saveTime
                "\"TITLE\" TEXT," + // 3: title
                "\"TAGS\" TEXT," + // 4: tags
                "\"INTRO\" TEXT," + // 5: intro
                "\"INGREDIENTS\" TEXT," + // 6: ingredients
                "\"BURDEN\" TEXT," + // 7: burden
                "\"ALBUMS\" TEXT);"); // 8: albums
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COOK_INDEX\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CookIndex entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        Long saveTime = entity.getSaveTime();
        if (saveTime != null) {
            stmt.bindLong(3, saveTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(5, tags);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(6, intro);
        }
 
        String ingredients = entity.getIngredients();
        if (ingredients != null) {
            stmt.bindString(7, ingredients);
        }
 
        String burden = entity.getBurden();
        if (burden != null) {
            stmt.bindString(8, burden);
        }
 
        String albums = entity.getAlbums();
        if (albums != null) {
            stmt.bindString(9, albums);
        }
    }

    @Override
    protected void attachEntity(CookIndex entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CookIndex readEntity(Cursor cursor, int offset) {
        CookIndex entity = new CookIndex( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // saveTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tags
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // intro
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ingredients
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // burden
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // albums
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CookIndex entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSaveTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTags(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIntro(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIngredients(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBurden(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAlbums(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CookIndex entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CookIndex entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
